// –°–ø–∏—Å–æ–∫ –ø–æ—à–∏—Ä–µ–Ω–∏—Ö –ø–∞—Ä–æ–ª—ñ–≤
const commonPasswords = [
    "password", "123456", "12345678", "qwerty", "abc123", "monkey", "1234567", 
    "letmein", "trustno1", "dragon", "baseball", "111111", "iloveyou", "master", 
    "sunshine", "ashley", "bailey", "passw0rd", "shadow", "123123", "654321", 
    "superman", "qazwsx", "michael", "Football", "welcome", "admin", "pass"
];

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ DOM
const passwordInput = document.getElementById('password-input');
const strengthMeter = document.getElementById('strength-meter');
const strengthText = document.getElementById('strength-text');
const generateBtn = document.getElementById('generate-btn');
const feedbackElement = document.getElementById('feedback');
const togglePasswordBtn = document.getElementById('toggle-password');
const copyBtn = document.getElementById('copy-btn');

// –Ü–∫–æ–Ω–∫–∏ –¥–ª—è –≤–∏–º–æ–≥
const lengthIcon = document.getElementById('length-icon');
const uppercaseIcon = document.getElementById('uppercase-icon');
const lowercaseIcon = document.getElementById('lowercase-icon');
const numberIcon = document.getElementById('number-icon');
const specialIcon = document.getElementById('special-icon');
const commonIcon = document.getElementById('common-icon');

// –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –≤–≤–µ–¥–µ–Ω–Ω—è –ø–∞—Ä–æ–ª—è
passwordInput.addEventListener('input', checkPassword);

// –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–∞—Ä–æ–ª—è
generateBtn.addEventListener('click', generatePassword);

// –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–∫–∞–∑—É/–ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
togglePasswordBtn.addEventListener('click', togglePasswordVisibility);

// –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
copyBtn.addEventListener('click', copyPassword);

// –§—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∞–∑—É/–ø—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
function togglePasswordVisibility() {
    if (passwordInput.type === 'password') {
        passwordInput.type = 'text';
        togglePasswordBtn.textContent = 'üîí';
    } else {
        passwordInput.type = 'password';
        togglePasswordBtn.textContent = 'üëÅÔ∏è';
    }
}

// –§—É–Ω–∫—Ü—ñ—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
function copyPassword() {
    if (passwordInput.value) {
        navigator.clipboard.writeText(passwordInput.value)
            .then(() => {
                // –¢–∏–º—á–∞—Å–æ–≤–∞ –∑–º—ñ–Ω–∞ —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É
                const originalText = copyBtn.textContent;
                copyBtn.textContent = '–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!';
                setTimeout(() => {
                    copyBtn.textContent = originalText;
                }, 2000);
            })
            .catch(err => {
                console.error('–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ –ø–∞—Ä–æ–ª—å: ', err);
                // –ó–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –¥–ª—è –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ –±–µ–∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ clipboard API
                const tempInput = document.createElement('input');
                tempInput.value = passwordInput.value;
                document.body.appendChild(tempInput);
                tempInput.select();
                document.execCommand('copy');
                document.body.removeChild(tempInput);
                
                const originalText = copyBtn.textContent;
                copyBtn.textContent = '–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ!';
                setTimeout(() => {
                    copyBtn.textContent = originalText;
                }, 2000);
            });
    }
}

// –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
function checkPassword() {
    const password = passwordInput.value;
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–º–æ–≥
    const hasLength = password.length >= 8;
    const hasUpperCase = /[A-Z]/.test(password);
    const hasLowerCase = /[a-z]/.test(password);
    const hasNumber = /[0-9]/.test(password);
    const hasSpecial = /[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]/.test(password);
    const isCommon = commonPasswords.includes(password.toLowerCase());
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä—ñ–≤ –¥–ª—è –≤–∏–º–æ–≥
    updateRequirementIcon(lengthIcon, hasLength);
    updateRequirementIcon(uppercaseIcon, hasUpperCase);
    updateRequirementIcon(lowercaseIcon, hasLowerCase);
    updateRequirementIcon(numberIcon, hasNumber);
    updateRequirementIcon(specialIcon, hasSpecial);
    updateRequirementIcon(commonIcon, !isCommon);
    
    // –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –±—ñ–±–ª—ñ–æ—Ç–µ–∫–∏ zxcvbn –¥–ª—è –æ—Ü—ñ–Ω–∫–∏ –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
    let result = { score: 0, feedback: { warning: '', suggestions: [] } };
    
    if (password) {
        result = zxcvbn(password);
    }
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
    updateStrengthMeter(result.score);
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É
    updateFeedback(result);
}

// –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è –≤–∏–º–æ–≥–∏
function updateRequirementIcon(icon, isMet) {
    if (isMet) {
        icon.textContent = '‚úì';
        icon.classList.add('met');
    } else {
        icon.textContent = '‚óã';
        icon.classList.remove('met');
    }
}

// –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ
function updateStrengthMeter(score) {
    let strengthPercentage = (score / 4) * 100;
    let strengthColor = '';
    let strengthLabel = '';
    
    switch (score) {
        case 0:
            strengthLabel = '–î—É–∂–µ —Å–ª–∞–±–∫–∏–π';
            strengthColor = '#777';
            break;
        case 1:
            strengthLabel = '–°–ª–∞–±–∫–∏–π';
            strengthColor = '#777';
            break;
        case 2:
            strengthLabel = '–°–µ—Ä–µ–¥–Ω—ñ–π';
            strengthColor = '#444';
            break;
        case 3:
            strengthLabel = '–ù–∞–¥—ñ–π–Ω–∏–π';
            strengthColor = '#222';
            break;
        case 4:
            strengthLabel = '–î—É–∂–µ –Ω–∞–¥—ñ–π–Ω–∏–π';
            strengthColor = '#000';
            break;
    }
    
    // –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ —Ç–µ–º–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {
        switch (score) {
            case 0:
            case 1:
                strengthColor = '#666';
                break;
            case 2:
                strengthColor = '#888';
                break;
            case 3:
                strengthColor = '#bbb';
                break;
            case 4:
                strengthColor = '#fff';
                break;
        }
    }
    
    strengthMeter.style.width = strengthPercentage + '%';
    strengthMeter.style.backgroundColor = strengthColor;
    strengthText.textContent = '–°–∏–ª–∞ –ø–∞—Ä–æ–ª—è: ' + strengthLabel;
    strengthText.className = ''; // –°–∫–∏–¥–∞–Ω–Ω—è –∫–ª–∞—Å—ñ–≤
    
    if (score <= 1) {
        strengthText.classList.add('weak');
    } else if (score === 2) {
        strengthText.classList.add('medium');
    } else if (score === 3) {
        strengthText.classList.add('strong');
    } else if (score === 4) {
        strengthText.classList.add('very-strong');
    }
}

// –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –∑–≤'—è–∑–∫—É
function updateFeedback(result) {
    feedbackElement.style.display = 'block';
    
    let feedbackText = '';
    
    if (result.feedback.warning) {
        feedbackText += '<strong>–ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è:</strong> ' + translateWarning(result.feedback.warning) + '<br>';
    }
    
    if (result.feedback.suggestions.length > 0) {
        feedbackText += '<strong>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:</strong><ul>';
        result.feedback.suggestions.forEach(suggestion => {
            feedbackText += '<li>' + translateSuggestion(suggestion) + '</li>';
        });
        feedbackText += '</ul>';
    }
    
    if (!feedbackText) {
        if (result.score >= 3) {
            feedbackText = '–ß—É–¥–æ–≤–∏–π –ø–∞—Ä–æ–ª—å! –ô–æ–≥–æ –±—É–¥–µ –≤–∞–∂–∫–æ –∑–ª–∞–º–∞—Ç–∏.';
        } else if (passwordInput.value) {
            feedbackText = '–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø–æ—Å–∏–ª–∏—Ç–∏ –ø–∞—Ä–æ–ª—å, –¥–æ—Ç—Ä–∏–º—É—é—á–∏—Å—å –∑–∞–∑–Ω–∞—á–µ–Ω–∏—Ö –≤–∏—â–µ –≤–∏–º–æ–≥.';
        } else {
            feedbackElement.style.display = 'none';
        }
    }
    
    feedbackElement.innerHTML = feedbackText;
}

// –ü–µ—Ä–µ–∫–ª–∞–¥ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω—å zxcvbn
function translateWarning(warning) {
    const translations = {
        'Straight rows of keys are easy to guess': '–ü–æ—Å–ª—ñ–¥–æ–≤–Ω–∏–π —Ä—è–¥ –∫–ª–∞–≤—ñ—à –ª–µ–≥–∫–æ –≤–≥–∞–¥–∞—Ç–∏',
        'Short keyboard patterns are easy to guess': '–ö–æ—Ä–æ—Ç–∫—ñ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω—ñ —à–∞–±–ª–æ–Ω–∏ –ª–µ–≥–∫–æ –≤–≥–∞–¥–∞—Ç–∏',
        'Repeats like "aaa" are easy to guess': '–ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –Ω–∞ –∫—à—Ç–∞–ª—Ç "aaa" –ª–µ–≥–∫–æ –≤–≥–∞–¥–∞—Ç–∏',
        'Repeats like "abcabcabc" are only slightly harder to guess than "abc"': '–ü–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –Ω–∞ –∫—à—Ç–∞–ª—Ç "abcabcabc" –ª–∏—à–µ —Ç—Ä–æ—Ö–∏ —Å–∫–ª–∞–¥–Ω—ñ—à–µ –≤–≥–∞–¥–∞—Ç–∏, –Ω—ñ–∂ "abc"',
        'Sequences like "abc" or "6543" are easy to guess': '–ü–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ –Ω–∞ –∫—à—Ç–∞–ª—Ç "abc" –∞–±–æ "6543" –ª–µ–≥–∫–æ –≤–≥–∞–¥–∞—Ç–∏',
        'Recent years are easy to guess': '–ù–µ—â–æ–¥–∞–≤–Ω—ñ —Ä–æ–∫–∏ –ª–µ–≥–∫–æ –≤–≥–∞–¥–∞—Ç–∏',
        'Dates are often easy to guess': '–î–∞—Ç–∏ —á–∞—Å—Ç–æ –ª–µ–≥–∫–æ –≤–≥–∞–¥–∞—Ç–∏',
        'This is a top-10 common password': '–¶–µ –æ–¥–∏–Ω —ñ–∑ 10 –Ω–∞–π–ø–æ—à–∏—Ä–µ–Ω—ñ—à–∏—Ö –ø–∞—Ä–æ–ª—ñ–≤',
        'This is a top-100 common password': '–¶–µ –æ–¥–∏–Ω —ñ–∑ 100 –Ω–∞–π–ø–æ—à–∏—Ä–µ–Ω—ñ—à–∏—Ö –ø–∞—Ä–æ–ª—ñ–≤',
        'This is a very common password': '–¶–µ –¥—É–∂–µ –ø–æ—à–∏—Ä–µ–Ω–∏–π –ø–∞—Ä–æ–ª—å',
        'This is similar to a commonly used password': '–¶–µ —Å—Ö–æ–∂–µ –Ω–∞ —á–∞—Å—Ç–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–Ω–∏–π –ø–∞—Ä–æ–ª—å',
        'A word by itself is easy to guess': '–û–∫—Ä–µ–º–µ —Å–ª–æ–≤–æ –ª–µ–≥–∫–æ –≤–≥–∞–¥–∞—Ç–∏',
        'Names and surnames by themselves are easy to guess': '–Ü–º–µ–Ω–∞ —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–∞ —Å–∞–º—ñ –ø–æ —Å–æ–±—ñ –ª–µ–≥–∫–æ –≤–≥–∞–¥–∞—Ç–∏',
        'Common names and surnames are easy to guess': '–ü–æ—à–∏—Ä–µ–Ω—ñ —ñ–º–µ–Ω–∞ —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–∞ –ª–µ–≥–∫–æ –≤–≥–∞–¥–∞—Ç–∏'
    };
    
    return translations[warning] || warning;
}

// –ü–µ—Ä–µ–∫–ª–∞–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π zxcvbn
function translateSuggestion(suggestion) {
    const translations = {
        'Use a longer keyboard pattern with more turns': '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –¥–æ–≤—à–∏–π –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–∏–π —à–∞–±–ª–æ–Ω –∑ –±—ñ–ª—å—à–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é –ø–æ–≤–æ—Ä–æ—Ç—ñ–≤',
        'Use a longer password': '–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –¥–æ–≤—à–∏–π –ø–∞—Ä–æ–ª—å',
        'Avoid repeated words and characters': '–£–Ω–∏–∫–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞–Ω–∏—Ö —Å–ª—ñ–≤ —ñ —Å–∏–º–≤–æ–ª—ñ–≤',
        'Avoid sequences': '–£–Ω–∏–∫–∞–π—Ç–µ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç–µ–π',
        'Avoid recent years': '–£–Ω–∏–∫–∞–π—Ç–µ –Ω–µ—â–æ–¥–∞–≤–Ω—ñ—Ö —Ä–æ–∫—ñ–≤',
        'Avoid years that are associated with you': '–£–Ω–∏–∫–∞–π—Ç–µ —Ä–æ–∫—ñ–≤, —è–∫—ñ –ø–æ–≤\'—è–∑–∞–Ω—ñ –∑ –≤–∞–º–∏',
        'Avoid dates and years that are associated with you': '–£–Ω–∏–∫–∞–π—Ç–µ –¥–∞—Ç —ñ —Ä–æ–∫—ñ–≤, —è–∫—ñ –ø–æ–≤\'—è–∑–∞–Ω—ñ –∑ –≤–∞–º–∏',
        'Add another word or two. Uncommon words are better.': '–î–æ–¥–∞–π—Ç–µ —â–µ –æ–¥–Ω–µ –∞–±–æ –¥–≤–∞ —Å–ª–æ–≤–∞. –†—ñ–¥–∫–æ–≤–∂–∏–≤–∞–Ω—ñ —Å–ª–æ–≤–∞ –∫—Ä–∞—â—ñ.',
        'Capitalization doesn\'t help very much': '–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤–µ–ª–∏–∫–∏—Ö –ª—ñ—Ç–µ—Ä –Ω–µ –¥—É–∂–µ –¥–æ–ø–æ–º–∞–≥–∞—î',
        'All-uppercase is almost as easy to guess as all-lowercase': '–í—Å—ñ –≤–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏ –º–∞–π–∂–µ —Ç–∞–∫ —Å–∞–º–æ –ª–µ–≥–∫–æ –≤–≥–∞–¥–∞—Ç–∏, —è–∫ —ñ –≤—Å—ñ –º–∞–ª—ñ',
        'Reversed words aren\'t much harder to guess': '–ó–≤–æ—Ä–æ—Ç–Ω—ñ —Å–ª–æ–≤–∞ –Ω–µ–Ω–∞–±–∞–≥–∞—Ç–æ —Å–∫–ª–∞–¥–Ω—ñ—à–µ –≤–≥–∞–¥–∞—Ç–∏',
        'Predictable substitutions like \'@\' instead of \'a\' don\'t help very much': '–ü–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω—ñ –∑–∞–º—ñ–Ω–∏, —Ç–∞–∫—ñ —è–∫ \'@\' –∑–∞–º—ñ—Å—Ç—å \'a\', –Ω–µ –¥—É–∂–µ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å'
    };
    
    return translations[suggestion] || suggestion;
}

// –§—É–Ω–∫—Ü—ñ—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
function generatePassword() {
    const length = 12; // –î–æ–≤–∂–∏–Ω–∞ –≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
    const uppercaseChars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    const lowercaseChars = 'abcdefghijklmnopqrstuvwxyz';
    const numberChars = '0123456789';
    const specialChars = '!@#$%^&*()-_=+[]{}|;:,.<>?';
    
    const allChars = uppercaseChars + lowercaseChars + numberChars + specialChars;
    
    // –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–∞—Ä–æ–ª—è
    let password = '';
    
    // –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ –æ–¥–Ω–æ–º—É —Å–∏–º–≤–æ–ª—É –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É
    password += uppercaseChars.charAt(Math.floor(Math.random() * uppercaseChars.length));
    password += lowercaseChars.charAt(Math.floor(Math.random() * lowercaseChars.length));
    password += numberChars.charAt(Math.floor(Math.random() * numberChars.length));
    password += specialChars.charAt(Math.floor(Math.random() * specialChars.length));
    
    // –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ä–µ—à—Ç–∏ —Å–∏–º–≤–æ–ª—ñ–≤
    for (let i = 4; i < length; i++) {
        password += allChars.charAt(Math.floor(Math.random() * allChars.length));
    }
    
    // –ü–µ—Ä–µ–º—ñ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
    password = password.split('').sort(() => 0.5 - Math.random()).join('');
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è –≤ –ø–æ–ª–µ –≤–≤–æ–¥—É —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –π–æ–≥–æ
    passwordInput.value = password;
    
    // –Ø–∫—â–æ –ø–∞—Ä–æ–ª—å –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ, –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø–æ–∫–∞–∑—É—î–º–æ –π–æ–≥–æ
    if (passwordInput.type === 'password') {
        togglePasswordVisibility();
    }
    
    checkPassword();
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ API Have I Been Pwned
async function checkPwnedPassword(password) {
    try {
        // –û—Ç—Ä–∏–º–∞–Ω–Ω—è SHA-1 —Ö–µ—à—É –ø–∞—Ä–æ–ª—è
        const encoder = new TextEncoder();
        const data = encoder.encode(password);
        const hashBuffer = await crypto.subtle.digest('SHA-1', data);
        
        // –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ö–µ—à—É –≤ —à—ñ—Å—Ç–Ω–∞–¥—Ü—è—Ç–∫–æ–≤–∏–π —Ñ–æ—Ä–º–∞—Ç
        const hashArray = Array.from(new Uint8Array(hashBuffer));
        const hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('').toUpperCase();
        
        // –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ö–µ—à –Ω–∞ –ø—Ä–µ—Ñ—ñ–∫—Å (–ø–µ—Ä—à—ñ 5 —Å–∏–º–≤–æ–ª—ñ–≤) —ñ –∑–∞–ª–∏—à–æ–∫
        const prefix = hashHex.substring(0, 5);
        const suffix = hashHex.substring(5);
        
        // –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø–∏—Ç –¥–æ API Have I Been Pwned
        const response = await fetch(`https://api.pwnedpasswords.com/range/${prefix}`);
        if (!response.ok) {
            throw new Error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ API Have I Been Pwned');
        }
        
        const text = await response.text();
        const hashes = text.split('\r\n');
        
        // –®—É–∫–∞—î–º–æ –Ω–∞—à —Å—É—Ñ—ñ–∫—Å —Ö–µ—à—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        for (const hash of hashes) {
            const [hashSuffix, count] = hash.split(':');
            if (hashSuffix === suffix) {
                return parseInt(count, 10); // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏—Ç–æ–∫—ñ–≤
            }
        }
        
        return 0; // –ü–∞—Ä–æ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤–∏—Ç–æ–∫–∞—Ö
    } catch (error) {
        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø–∞—Ä–æ–ª—è:', error);
        return -1; // –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ
    }
}

// –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
const passwordRequirements = document.querySelector('.password-info');
const pwnedCheckElement = document.createElement('div');
pwnedCheckElement.classList.add('requirement');
pwnedCheckElement.innerHTML = `
    <span id="pwned-icon" class="requirement-icon">‚óã</span>
    <span class="requirement-text">–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤–∏—Ç–æ–∫–∞—Ö –¥–∞–Ω–∏—Ö</span>
`;
passwordRequirements.appendChild(pwnedCheckElement);

const pwnedIcon = document.getElementById('pwned-icon');

// –û–Ω–æ–≤–ª—é—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
const originalCheckPassword = checkPassword;
checkPassword = async function() {
    originalCheckPassword();
    
    const password = passwordInput.value;
    
    if (password.length >= 1) {
        pwnedIcon.textContent = '‚è≥'; // –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        
        const count = await checkPwnedPassword(password);
        
        if (count > 0) {
            pwnedIcon.textContent = '‚úó';
            pwnedIcon.classList.remove('met');
            pwnedIcon.nextElementSibling.textContent = `–ó–Ω–∞–π–¥–µ–Ω–æ —É ${count} –≤–∏—Ç–æ–∫–∞—Ö –¥–∞–Ω–∏—Ö!`;
            
            // –î–æ–¥–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —É –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫
            const pwdFeedback = document.createElement('p');
            pwdFeedback.innerHTML = `<strong>–£–≤–∞–≥–∞:</strong> –¶–µ–π –ø–∞—Ä–æ–ª—å –∑–Ω–∞–π–¥–µ–Ω–æ —É ${count} –≤–∏—Ç–æ–∫–∞—Ö –¥–∞–Ω–∏—Ö. –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —ñ–Ω—à–∏–π –ø–∞—Ä–æ–ª—å.`;
            
            const existingPwnedWarning = Array.from(feedbackElement.querySelectorAll('p')).find(p => p.textContent.includes('–≤–∏—Ç–æ–∫–∞—Ö –¥–∞–Ω–∏—Ö'));
            if (!existingPwnedWarning) {
                feedbackElement.appendChild(pwdFeedback);
                feedbackElement.style.display = 'block';
            }
        } else if (count === 0) {
            pwnedIcon.textContent = '‚úì';
            pwnedIcon.classList.add('met');
            pwnedIcon.nextElementSibling.textContent = '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤–∏—Ç–æ–∫–∞—Ö –¥–∞–Ω–∏—Ö';
            
            // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è —è–∫—â–æ –≤–æ–Ω–æ —î
            const existingPwnedWarning = Array.from(feedbackElement.querySelectorAll('p')).find(p => p.textContent.includes('–≤–∏—Ç–æ–∫–∞—Ö –¥–∞–Ω–∏—Ö'));
            if (existingPwnedWarning) {
                feedbackElement.removeChild(existingPwnedWarning);
            }
        } else {
            pwnedIcon.textContent = '!';
            pwnedIcon.classList.remove('met');
            pwnedIcon.nextElementSibling.textContent = '–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —É –±–∞–∑—ñ –≤–∏—Ç–æ–∫—ñ–≤';
        }
    } else {
        pwnedIcon.textContent = '‚óã';
        pwnedIcon.classList.remove('met');
        pwnedIcon.nextElementSibling.textContent = '–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤–∏—Ç–æ–∫–∞—Ö –¥–∞–Ω–∏—Ö';
    }
};

// –î–æ–¥–∞—î–º–æ —Å–ª—É—Ö–∞—á –ø–æ–¥—ñ–π –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –∑–º—ñ–Ω —É –≤–ø–æ–¥–æ–±–∞–Ω–Ω—è—Ö —Ç–µ–º–∏
if (window.matchMedia) {
    const darkModeMediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    darkModeMediaQuery.addEventListener('change', () => {
        // –ü–µ—Ä–µ–º–∞–ª—å–æ–≤—É–≤–∞–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞–¥—ñ–π–Ω–æ—Å—Ç—ñ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ç–µ–º–∏
        checkPassword();
    });
}

// –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø–æ–¥—ñ–π
document.addEventListener('touchstart', function() {
    // –ü–æ—Ä–æ–∂–Ω—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤—ñ–¥–≥—É—á–Ω–æ—Å—Ç—ñ –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—è—Ö
}, false);

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
checkPassword();
